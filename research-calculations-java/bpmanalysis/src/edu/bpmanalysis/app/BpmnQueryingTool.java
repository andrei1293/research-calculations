package edu.bpmanalysis.app;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class BpmnQueryingTool extends JFrame {
    private JList modelsList;
    private JTextArea queryText;
    private JButton executeQueryButton;
    private JPanel formPanel;
    private JTable modelStructureTable;
    private JTextField qualityField;
    private JTextField totalNodesResult;
    private JLabel totalModelsLabel;

    private BpmnNodesQueryingUtil bpmnNodesQueryingUtil;

    public BpmnQueryingTool() {
        setTitle("BPMN Querying Tool");
        setContentPane(formPanel);
        setVisible(true);
        setSize(new Dimension(1280, 640));
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        bpmnNodesQueryingUtil = new BpmnNodesQueryingUtil();

        String[] columnNames = {"Label", "Type", "In-degree", "Out-degree"};
        List<String[]> tableResultsData = new ArrayList<>();
        DefaultListModel<String> listModel = new DefaultListModel<>();
        List<String> modelsItems = bpmnNodesQueryingUtil.getAllModels();

        for (String item : modelsItems) {
            listModel.addElement(item);
        }

        totalModelsLabel.setText(modelsItems.size() + " models");
        modelsList.setModel(listModel);
        modelsList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String selectedModel = modelsList.getSelectedValue().toString();
                queryText.setText("select * Task from " + selectedModel);
                qualityField.setText(String.format("%.2f", bpmnNodesQueryingUtil.getModelQuality(selectedModel)));
            }
        });

        executeQueryButton.addActionListener(e -> {
            try {
                String query = queryText.getText();
                tableResultsData.clear();

                for (Map<String, String> entry : bpmnNodesQueryingUtil.executeQuery(query)) {
                    tableResultsData.add(new String[]{entry.get("label"), entry.get("type"), entry.get("indeg"), entry.get("outdeg")});
                }

                Object[][] tableData = new Object[tableResultsData.size()][];

                for (int i = 0; i < tableResultsData.size(); i++) {
                    tableData[i] = tableResultsData.get(i);
                }

                modelStructureTable.setModel(new DefaultTableModel(tableData, columnNames) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                });
                totalNodesResult.setText(String.valueOf(tableData.length));
            } catch (RuntimeException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
            }
        });

        modelStructureTable.setModel(new DefaultTableModel(new Object[][]{{}}, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        });
    }

    public static void main(String[] args) {
        new BpmnQueryingTool();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        formPanel = new JPanel();
        formPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        executeQueryButton = new JButton();
        executeQueryButton.setText("Execute Query");
        formPanel.add(executeQueryButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        formPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        modelStructureTable = new JTable();
        scrollPane1.setViewportView(modelStructureTable);
        final JScrollPane scrollPane2 = new JScrollPane();
        formPanel.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        queryText = new JTextArea();
        queryText.setFont(new Font("Source Code Pro", queryText.getFont().getStyle(), 14));
        queryText.setRows(2);
        scrollPane2.setViewportView(queryText);
        final JScrollPane scrollPane3 = new JScrollPane();
        formPanel.add(scrollPane3, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 4, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(207, 128), null, 0, false));
        modelsList = new JList();
        scrollPane3.setViewportView(modelsList);
        final JLabel label1 = new JLabel();
        label1.setText("Model quality");
        formPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        qualityField = new JTextField();
        qualityField.setEditable(false);
        formPanel.add(qualityField, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        totalNodesResult = new JTextField();
        totalNodesResult.setEditable(false);
        formPanel.add(totalNodesResult, new com.intellij.uiDesigner.core.GridConstraints(4, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Total");
        formPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        totalModelsLabel = new JLabel();
        totalModelsLabel.setText("Label");
        formPanel.add(totalModelsLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return formPanel;
    }
}
